name: Continuous Deployment (Plugin Zip Artifact)

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build-zip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate ephemeral DB root password
        id: gen-db-pw
        run: |
          PW=$(openssl rand -hex 12)
          echo "DB_ROOT_PW=$PW" >> $GITHUB_ENV
          echo "MYSQL_PWD=$PW" >> $GITHUB_ENV # allow mysql client auth without leaking via -p
      - name: Echo generated (masked)
        run: echo "Ephemeral DB root password generated (length ${#DB_ROOT_PW})."
      - name: Secret Scan (Gitleaks)
        uses: gitleaks/gitleaks-action@v2
        with:
            args: detect --no-git -v
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none
          tools: composer, phpunit, phpcs
          extensions: mysqli
      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            composer-${{ runner.os }}-
      - name: Cache Node
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json','**/yarn.lock','**/pnpm-lock.yaml') }}
          restore-keys: |
            npm-${{ runner.os }}-
      
      - name: Install PHPCS standards
        run: |
          composer global config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
          composer global require wp-coding-standards/wpcs:"^3.0" dealerdirect/phpcodesniffer-composer-installer:"^1.0" || true
          phpcs --config-set installed_paths $(composer global config home)/vendor/wp-coding-standards/wpcs || true
      - name: Start MySQL service
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: '8.0'
          mysql database: 'wordpress_test'
          # omit root password (we connect without -p; ephemeral password exported for client usage only if needed)
      - name: Wait for DB
        run: |
          echo "Waiting for MySQL (up to ~80s)..."
          for i in {1..40}; do
            mysqladmin --host=127.0.0.1 --user=root ping >/dev/null 2>&1 && break
            sleep 2
          done
          mysql --host=127.0.0.1 --user=root -e 'SELECT 1' || (echo 'MySQL not reachable' >&2; exit 1)
      - name: Set up WordPress test suite
        run: |
          WP_VERSION=latest
          set -e
          SCRIPT_PATH=/tmp/install-wp-tests.sh
          # Try multiple fallbacks for installer reliability
          for U in \
            https://raw.githubusercontent.com/wp-cli/scaffold-command/master/templates/install-wp-tests.sh \
            https://raw.githubusercontent.com/wp-cli/scaffold-command/trunk/templates/install-wp-tests.sh \
            https://raw.githubusercontent.com/wp-cli/scaffold-command/3c6a4f6e21b4e6f6b7cb3a3d4ccf6d59f6a01111/templates/install-wp-tests.sh ; do
            echo "Attempting download: $U";
            if curl -fsSL "$U" -o "$SCRIPT_PATH"; then echo "Downloaded from $U"; break; fi
          done
          if [ ! -s "$SCRIPT_PATH" ]; then echo 'Failed to download install-wp-tests.sh from all fallbacks' >&2; exit 1; fi
          bash "$SCRIPT_PATH" wordpress_test root "$DB_ROOT_PW" 127.0.0.1 "$WP_VERSION"
      - name: Install WooCommerce (optional)
        run: |
          mkdir -p wp-content/plugins
          git clone --depth=1 https://github.com/woocommerce/woocommerce.git wp-content/plugins/woocommerce || true
      - name: PHPCS
        run: phpcs -q --standard=.phpcs.xml.dist .
      - name: PHPUnit
        env:
          WP_TESTS_DIR: /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/wordpress-tests-lib
        run: |
          phpunit --colors=always
      - name: Build Zip (export-ignore aware)
        id: build
        run: |
          VERSION=$(grep '^Version:' authentic-checker.php | awk '{print $2}')
          ZIP=wooauthentix-${VERSION}.zip
          git archive --format=zip --output "$ZIP" HEAD
          echo "zip_name=$ZIP" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: wooauthentix-latest
          path: ${{ steps.build.outputs.zip_name }}
          if-no-files-found: error
