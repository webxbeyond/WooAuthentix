name: CI
on:
  pull_request:
  push:
    branches: [ main, master ]

env:
  WP_VERSION: latest
  PHP_VERSION: '8.2'
  # DB_ROOT_PW intentionally not hardcoded; generated per-run below.

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['8.2','8.1','7.4']
    steps:
      - uses: actions/checkout@v4
      - name: Generate ephemeral DB root password
        id: gen-db-pw
        run: |
          PW=$(openssl rand -hex 12)
          echo "DB_ROOT_PW=$PW" >> $GITHUB_ENV
          echo "MYSQL_PWD=$PW" >> $GITHUB_ENV # mysql client will read this; avoid -p warning
          echo "rootpw=$PW" >> $GITHUB_OUTPUT
      - name: Secret Scan (Gitleaks)
        uses: gitleaks/gitleaks-action@v2
        with:
            args: detect --no-git -v
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          tools: composer, phpunit, phpcs
          extensions: mysqli
      - name: Install dependencies
        run: |
          composer global require wp-coding-standards/wpcs:"^3.0" dealerdirect/phpcodesniffer-composer-installer:"^1.0"
          phpcs --config-set installed_paths $(composer global config home)/vendor/wp-coding-standards/wpcs
      - name: PHPCS
        run: phpcs -q --standard=.phpcs.xml.dist . || true
      - name: Start MySQL service
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: '8.0'
          mysql database: 'wordpress_test'
          mysql root password: ${{ steps.gen-db-pw.outputs.rootpw }}
      - name: Wait for DB
        run: |
          echo "Waiting for MySQL to become available..."
          for i in {1..40}; do
            mysqladmin --host=127.0.0.1 --user=root ping >/dev/null 2>&1 && break
            sleep 2
          done
          mysql --host=127.0.0.1 --user=root -e 'SELECT 1' || (echo 'MySQL not reachable' >&2; exit 1)
      - name: Install SVN (required by WP test installer)
        run: |
          if ! command -v svn >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y subversion
          fi
      - name: Set up WordPress test suite
        run: |
          WP_VERSION=${WP_VERSION:-latest}
          set -e
          SCRIPT_PATH=/tmp/install-wp-tests.sh
          # Try primary (master), then trunk, then pinned commit fallback.
          for U in \
            https://raw.githubusercontent.com/wp-cli/scaffold-command/master/templates/install-wp-tests.sh \
            https://raw.githubusercontent.com/wp-cli/scaffold-command/trunk/templates/install-wp-tests.sh \
            https://raw.githubusercontent.com/wp-cli/scaffold-command/3c6a4f6e21b4e6f6b7cb3a3d4ccf6d59f6a01111/templates/install-wp-tests.sh ; do
            echo "Attempting download: $U";
            if curl -fsSL "$U" -o "$SCRIPT_PATH"; then
              echo "Downloaded test installer from $U"; break; fi
          done
          if [ ! -s "$SCRIPT_PATH" ]; then
            echo "Failed to download install-wp-tests.sh from all fallbacks" >&2; exit 1; fi
          bash "$SCRIPT_PATH" wordpress_test root "$DB_ROOT_PW" 127.0.0.1 "$WP_VERSION"
      - name: Install WooCommerce (optional)
        run: |
          mkdir -p wp-content/plugins
          git clone --depth=1 https://github.com/woocommerce/woocommerce.git wp-content/plugins/woocommerce || true
      - name: PHPUnit
        env:
          WP_TESTS_DIR: /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/wordpress-tests-lib
        run: |
          phpunit --version
          phpunit --colors=always || (echo "PHPUnit tests failed" && exit 1)
