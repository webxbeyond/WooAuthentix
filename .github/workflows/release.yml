name: Release Package

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Semantic bump (major | minor | patch) ignored if custom_version provided'
        required: false
        default: 'patch'
      custom_version:
        description: 'Explicit version (e.g. 2.3.0) overrides bump logic'
        required: false

jobs:
  auto-tag:
    name: Auto Tag (branch push)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0
      - name: Read plugin version
        id: readver
        run: |
          VER=$(grep -E "^Version:" -m1 authentic-checker.php | awk '{print $2}')
          echo "version=$VER" >> $GITHUB_OUTPUT
      - name: Ensure constant matches
        run: |
          CONST=$(grep -E "const WC_APC_VERSION" -m1 authentic-checker.php | sed -E "s/.*'([^']+)'.*/\1/")
          if [ "$CONST" != "${{ steps.readver.outputs.version }}" ]; then
            echo "Version constant mismatch ($CONST vs ${{ steps.readver.outputs.version }})" >&2
            exit 1
          fi
      - name: Check if tag exists
        id: check
        run: |
          git fetch --tags
          if git rev-parse -q --verify refs/tags/v${{ steps.readver.outputs.version }}; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create and push tag
        if: steps.check.outputs.exists == 'false'
        run: |
          git config user.name 'github-actions'
          git config user.email 'github-actions@github.com'
          git tag v${{ steps.readver.outputs.version }}
          git push origin v${{ steps.readver.outputs.version }}
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      WP_VERSION: latest
      PHP_VERSION: '8.2'
    needs: [auto-tag]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: (Dispatch) Bump & Tag Version (semantic)
        if: github.event_name == 'workflow_dispatch'
        run: |
          CURRENT=$(grep -E '^Version:' -m1 authentic-checker.php | awk '{print $2}')
          INPUT_VERSION='${{ github.event.inputs.custom_version }}'
          BUMP_TYPE='${{ github.event.inputs.bump_type }}'
          if [ -n "$INPUT_VERSION" ]; then
            NEWVER="$INPUT_VERSION"
          else
            IFS='.' read -r MAJ MIN PAT <<< "$CURRENT"
            case "$BUMP_TYPE" in
              major) MAJ=$((MAJ+1)); MIN=0; PAT=0 ;;
              minor) MIN=$((MIN+1)); PAT=0 ;;
              *) PAT=$((PAT+1));; # patch default
            esac
            NEWVER="${MAJ}.${MIN}.${PAT}"
          fi
          if git rev-parse -q --verify refs/tags/v${NEWVER}; then
            echo "Tag v${NEWVER} already exists; aborting." >&2; exit 1; fi
          # Update file only if changed
          if [ "$CURRENT" != "$NEWVER" ]; then
            sed -i "s/^Version: .*/Version: ${NEWVER}/" authentic-checker.php
            sed -i "s/const WC_APC_VERSION = '.*'/const WC_APC_VERSION = '${NEWVER}'/" authentic-checker.php
            git config user.name 'github-actions'
            git config user.email 'github-actions@github.com'
            git add authentic-checker.php
            git commit -m "chore: bump version to ${NEWVER}" || echo 'No diff'
            git push
          fi
          git tag v${NEWVER}
          git push origin v${NEWVER}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: none
          tools: phpunit, phpcs
          extensions: mysqli
      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            composer-${{ runner.os }}-
      - name: Cache Node
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json','**/yarn.lock','**/pnpm-lock.yaml') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install PHPCS standards
        run: |
          composer global require wp-coding-standards/wpcs:"^3.0" dealerdirect/phpcodesniffer-composer-installer:"^1.0" || true
          phpcs --config-set installed_paths $(composer global config home)/vendor/wp-coding-standards/wpcs || true

      - name: Start MySQL service
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: '8.0'
          mysql database: 'wordpress_test'
          mysql root password: ''

      - name: Wait for DB
        run: |
          for i in {1..30}; do mysql -h 127.0.0.1 -uroot -e 'SELECT 1' && break || sleep 2; done

      - name: Set up WordPress test suite
        run: |
          WP_VERSION=${WP_VERSION:-latest}
          bash <(curl -s https://raw.githubusercontent.com/wp-cli/scaffold-command/trunk/templates/install-wp-tests.sh) wordpress_test root '' 127.0.0.1 $WP_VERSION

      - name: (Optional) Install WooCommerce
        run: |
          mkdir -p wp-content/plugins
          git clone --depth=1 https://github.com/woocommerce/woocommerce.git wp-content/plugins/woocommerce || true

      - name: PHPUnit
        env:
          WP_TESTS_DIR: /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/wordpress-tests-lib
        run: |
          phpunit --version
          phpunit --colors=always
      - name: PHPCS (enforce)
        run: phpcs -q --standard=.phpcs.xml.dist .

      - name: Validate readme Stable tag
        run: |
          STABLE=$(grep -E '^Stable tag:' -m1 readme.txt | awk '{print $3}')
          HEADER_VER=$(grep -E '^Version:' -m1 authentic-checker.php | awk '{print $2}')
          if [ "$STABLE" != "$HEADER_VER" ]; then
            echo "Stable tag ($STABLE) does not match plugin header version ($HEADER_VER)" >&2
            exit 1
          fi

      - name: Derive Version
        id: ver
        run: |
          TAG_NAME=${GITHUB_REF_NAME}
          CLEAN_TAG=${TAG_NAME#v}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$CLEAN_TAG" >> $GITHUB_OUTPUT

      - name: Extract Changelog Section
        id: changelog
        run: |
          VER=${{ steps.ver.outputs.version }}
          BODY=""
          if [ -f CHANGELOG.md ]; then
            # Try to extract section starting with ## vVER or ## VER
            if grep -q "^## .*${VER}" CHANGELOG.md; then
              BODY=$(awk -v ver="$VER" '/^## /{p=0} /^## .*'"$VER"'/{p=1;next} p' CHANGELOG.md | sed '/^$/N;/^\n$/D')
            fi
          fi
          if [ -z "$BODY" ]; then
            # Fallback to git log since previous tag
            PREV=$(git tag --sort=-v:refname | grep '^v' | grep -v "^v${VER}$" | head -n1 || true)
            if [ -n "$PREV" ]; then
              BODY=$(git log --pretty=format:'- %s' ${PREV}..HEAD)
            else
              BODY=$(git log --pretty=format:'- %s' -n 50)
            fi
          fi
          echo "body<<'EOF'" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Build Zip (git archive respects export-ignore)
        id: build_zip
        run: |
          ZIP=wooauthentix-${{ steps.ver.outputs.version }}.zip
          git archive --format=zip --output "$ZIP" HEAD
          echo "zip_name=$ZIP" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-zip
          path: ${{ steps.build_zip.outputs.zip_name }}
          if-no-files-found: error

      - name: Create Release (tag push only)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ steps.ver.outputs.tag_name }}
          release_name: WooAuthentix ${{ steps.ver.outputs.version }}
          body: ${{ steps.changelog.outputs.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build_zip.outputs.zip_name }}
          asset_name: ${{ steps.build_zip.outputs.zip_name }}
          asset_content_type: application/zip

  deploy-wordpress-org:
    name: Deploy to WordPress.org SVN
    runs-on: ubuntu-latest
    needs: build-and-release
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      WP_ORG_SLUG: wooauthentix-product-code-verification # Adjust to actual slug
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Verify version consistency
        run: |
          HEADER_VER=$(grep -E '^Version:' -m1 authentic-checker.php | awk '{print $2}')
          TAG=${GITHUB_REF_NAME#v}
          if [ "$HEADER_VER" != "$TAG" ]; then
            echo "Plugin header version ($HEADER_VER) does not match tag ($TAG)" >&2
            exit 1
          fi
      - name: Deploy to WordPress.org (svn)
        env:
          WP_ORG_SLUG: ${{ env.WP_ORG_SLUG }}
          VERSION_TAG: ${{ github.ref_name }}
        run: |
          WP_ORG_USERNAME='${{ secrets.WP_ORG_USERNAME }}'
          WP_ORG_PASSWORD='${{ secrets.WP_ORG_PASSWORD }}'
          if [ -z "$WP_ORG_USERNAME" ] || [ -z "$WP_ORG_PASSWORD" ]; then
            echo "Skipping deploy: WP_ORG_USERNAME or WP_ORG_PASSWORD not set."; exit 0; fi
          VERSION=${VERSION_TAG#v}
          SVN_URL="https://plugins.svn.wordpress.org/${WP_ORG_SLUG}"
          echo "Preparing SVN checkout for $SVN_URL (version $VERSION)";
          svn checkout "${SVN_URL}" svn-wp || svn co "${SVN_URL}" svn-wp
          cd svn-wp
          # Create tag dir if not exists
          mkdir -p tags/$VERSION
          rm -rf trunk/*
          # Copy current repo (excluding .git and workflow dir)
          rsync -av --delete --exclude '.git' --exclude '.github' ../../ ./trunk/
          # Copy to tag
          rsync -av trunk/ tags/$VERSION/
          svn add --force * > /dev/null 2>&1 || true
          svn status
          # Remove deleted files
          svn status | awk '/^!/ {print $2}' | xargs -r svn del
          echo "Committing to WordPress.org..."
          svn commit -m "Release version $VERSION" --username "$WP_ORG_USERNAME" --password "$WP_ORG_PASSWORD" --non-interactive --no-auth-cache || {
            echo "SVN commit failed" >&2; exit 1; }
          echo "WordPress.org deploy complete."
